@class BaseClass {
	@protected member="default value"

	@virtual @public @method display {
		echo "Hello from BaseClass!"
		echo "@this.member"
	}
}

@class DerivedClass : BaseClass {
	@public @method display {
		echo "Hello from DerivedClass!"
		echo "@this.member"
	}
}

@class UnrelatedClass {
	@public @method display {
		echo "Hello from UnrelatedClass!"
	}
}

@BaseClass baseObject
@DerivedClass derivedObject
@UnrelatedClass unrelatedObject

@baseObject.display # Echoes "Hello from the BaseClass!" and "default value"
@derivedObject.display # Echoes "Hello from the DerivedClass!" and "default value"
@unrelatedObject.display # Echoes "Hello from UnrelatedClass!"

# Casting
@BaseClass* basePointer=@downcast(BaseClass) @new DerivedClass # Compile-time check: BaseClass is a parent of DerivedClass
@basePointer.display # Echoes "Hello from the BaseClass!" and "default value"

@DerivedClass* derivedPointer=@upcast(DerivedClass) @new BaseClass # Compile-time check: DerivedClass is a child of BaseClass
@derivedPointer.display # Echoes "Hello from the DerivedClass!" and "default value"

@BaseClass* anotherBasePointer=@cast(BaseClass) @new UnrelatedClass # No type checking, compiler will just cast it
@anotherBasePointer.display # Echoes "Hello from UnrelatedClass!" and a blank line (no 'member' data member has been defined in UnrelatedClass)