@include_once "bpp_path.bpp"
@include_once "detect-tty.bpp"
@include_once "TestStats.bpp"

@class Test {
	@protected name
	@protected status="untested"
	@protected sourceFile
	@protected expectedOutput
	@protected @TestStats* stats

	@public @method setName name {
		@this.name="$name"
	}

	@public @method setSourceFile sourceFile {
		@this.sourceFile="$sourceFile"

		if [[ ! -f "@this.sourceFile" ]]; then
			echo "The source file @this.sourceFile does not exist."
			echo "CWD: $(pwd)"
		fi
	}

	@public @method setExpectedOutput expectedOutput {
		@this.expectedOutput="$expectedOutput"
	}

	@public @method setStats stats {
		@this.stats="$stats"
	}

	@public @method getName {
		echo "@this.name"
	}

	@public @method getStatus {
		echo "@this.status"
	}

	@public @method getSourceFile {
		echo "@this.sourceFile"
	}

	@public @method getExpectedOutput {
		echo "@this.expectedOutput"
	}

	@public @method run {
		if [[ -z "@this.name" ]] || [[ -z "@this.sourceFile" ]]; then
			echo "Test name and source file must be set before running the test."
			exit 1
		fi

		if [[ ! -f "@this.sourceFile" ]]; then
			if [[ @this.stats != @nullptr ]]; then
				@this.stats.incrementUntestedTests
			fi
			@this.toPrimitive
			return
		fi

		local output="" outputLines="" expectedOutputLines=""
		IFS= read -r -d '' output < <(BPP="@compiler.full_path" bin/bpp @this.sourceFile 2>&1; printf "\0")
		
		# Split the output into lines and split the expected output into lines
		mapfile -t outputLines < <(echo "$output")
		mapfile -t expectedOutputLines < <(echo "@this.expectedOutput")

		# If the output and expected output have different numbers of lines, the test fails immediately
		if [[ "${#outputLines[@]}" -ne "${#expectedOutputLines[@]}" ]]; then
			@this.status="fail"
			return
		fi

		# Compare each line
		local i=0
		@this.status="pass"
		while [[ "$i" -lt "${#outputLines[@]}" ]]; do
			if [[ "@(grep -o -P "^${expectedOutputLines[$i]}$" <<<"${outputLines[$i]}")" != "${outputLines[$i]}" ]]; then
				@this.status="fail"
				break
			fi
			i=$((i+1))
		done

		if [[ @this.stats != @nullptr ]]; then
			case "@this.status" in
				"untested")
					@this.stats.incrementUntestedTests
					;;
				"pass")
					@this.stats.incrementPassedTests
					;;
				"fail")
					@this.stats.incrementFailedTests
					;;
			esac
		fi
		@this.toPrimitive
	}

	@public @method toPrimitive {
		# Display the test name and status
		# In the format:
		# TestName: Status
		# The status should be colored green if pass, red if fail, and yellow if untested

		local statusColor="33"
		if [[ "@this.status" == "pass" ]]; then
			statusColor="32"
		elif [[ "@this.status" == "fail" ]]; then
			statusColor="31"
		fi

		local colorize="\033[1;${statusColor}m" uncolorize="\033[0m"

		if [[ "$in_tty" == "false" ]]; then
			colorize=""
			uncolorize=""
		fi

		echo -n -e "@this.name: ${colorize}@this.status${uncolorize}\n"
	}
}
