#!/usr/bin/env bpp
#AUTODOC#

# Copyright (C) 2025 Andrew S. Rightenburg
# GNU General Public License v3.0
# This file is part of the Bash++ Standard Library.

@include_once "SharedObject"

if ! command -v wc &> /dev/null; then
	>&2 echo "Bash++: SharedStack requires the 'wc' command to be available."
	exit 1
fi
if ! command -v head &> /dev/null; then
	>&2 echo "Bash++: SharedStack requires the 'head' command to be available."
	exit 1
fi
if ! command -v base64 &> /dev/null; then
	>&2 echo "Bash++: SharedStack requires the 'base64' command to be available."
	exit 1
fi
if ! command -v sed &> /dev/null; then
	>&2 echo "Bash++: SharedStack requires the 'sed' command to be available."
	exit 1
fi

#CLASS SharedStack : SharedObject
## The SharedStack class provides a stack implementation that shares its state across multiple instances.
## This class is useful for scenarios in which we're forking processes and need a shared stack between them.
## 
## Reads and writes are atomic and concurrency-safe.
## 
## The stack can be encrypted for security.
## 
## Internally, it uses the file system to store the stack state.
@class SharedStack : SharedObject {
	##METHOD public size
	### Echoes the number of elements in the stack.
	@virtual @public @method size {
		wc -l 2>/dev/null < @this.object_file || echo 0
	}

	##METHOD public push
	### Pushes a value onto the top of the stack.
	###PARAM primitive value
	#### The value to push onto the top of the stack.
	@virtual @public @method push value {
		@this.used=1
		@this._lock
		if [[ @this.encrypted -eq 1 ]]; then
			value="$(openssl enc -aes-256-cbc -pbkdf2 -pass pass:@this.encryption_key -a -A <<<"$value")"
		fi
		printf "%s" "$value" | base64 -w0 >> "@this.object_file"
		echo >> "@this.object_file"
		@this._unlock
	}

	@private @method _get_top {
		local last_line=@(tail -n 1 "@this.object_file" | base64 -d)
		if [[ -z "$last_line" ]]; then
			return 1
		fi
		
		if [[ @this.encrypted -eq 1 ]]; then
			printf "%s" "$last_line" | openssl enc -d -aes-256-cbc -pbkdf2 -pass pass:@this.encryption_key -a -A
		else
			echo "$last_line"
		fi
	}

	##METHOD public pop
	### Pops the top element off the stack and echoes it.
	@virtual @public @method pop {
		@this.used=1
		@this._lock

		@this._get_top
		if [[ $? -ne 0 ]]; then
			@this._unlock
			return 1
		fi
		
		sed -i.tmp '$ d' "@{this.object_file}" && rm -f "@{this.object_file}.tmp"
		@this._unlock
	}

	##METHOD public top
	### Echoes the top element of the stack without removing it.
	@virtual @public @method top {
		@this.used=1
		@this._lock

		@this._get_top
		if [[ $? -ne 0 ]]; then
			@this._unlock
			return 1
		fi
		
		@this._unlock
	}

	##METHOD public clear
	### Removes all elements from the stack.
	@virtual @public @method clear {
		@this._lock
		> "@this.object_file"
		@this._unlock
	}

	##METHOD public empty
	### Echoes "true" if the stack is empty, "false" otherwise.
	@virtual @public @method empty {
		@this._lock
		if [[ -z $(head -n 1 "@this.object_file") ]]; then
			echo "true"
		else
			echo "false"
		fi
		@this._unlock
	}
}

#ENDAUTODOC#
