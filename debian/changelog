bpp (0.2.7) unstable; urgency=medium

  * Removed 'Array' class from STL
    This functionality is really already served by Bash primitive arrays
    Adding non-primitive object arrays would be nice however
  * Bug fix: We'll always have to dereference a pointer if the first
    object in a reference chain is a pointer
    Object references should still be reworked altogether
  * Added test to verify correct exit codes from run-on-exit
  * Pass compiler path to tests in the test suite
    If we want to run another instance of the compiler from within a test,
    we can access it via the $BPP environment variable
  * Portable solution to the problem with inconsistent WEXITSTATUS
    behavior across different systems
  * Portability: Do not assume the presence of /proc/self

 -- rail5 <andrew@rail5.org>  Mon, 24 Feb 2025 15:24:22 +0800

bpp (0.2.6) unstable; urgency=medium

  * Case patterns: Inherit directly from code entities
  * Code entities: Return line buffers by default in get_pre_code
    and get_post_code
  * Make sure we place the pre- and post- code for case headers and case
    rules in the right places
    Pre/post code for case headers should go before/after the entire
    case statement
    Pre/post code inside case rules should go in the usual places
  * Ensure each assignment temporary rvalue has a unique identifier

 -- rail5 <andrew@rail5.org>  Mon, 17 Feb 2025 02:01:02 +0800

bpp (0.2.5) unstable; urgency=medium

  * Changed a few internal_errors to syntax_errors
    An internal error should only be thrown if we encounter something
    that shouldn't be possible
  * More helpful internal errors
    Provide the text of the parse tree where we hit the internal error
  * Better syntax error reporting
    In some cases, ANTLR mistakenly reports token positions as line 0
    column -1 In those cases, we should say that the position is not
    known to us instead of trying to display that portion of the file

 -- rail5 <andrew@rail5.org>  Sun, 16 Feb 2025 18:01:29 +0800

bpp (0.2.4) unstable; urgency=medium

  * Patch: Properly evaluate supershells before & after while loops
  * -t option should exit early if all we're doing is displaying the
    tokens.

 -- rail5 <andrew@rail5.org>  Sun, 16 Feb 2025 01:09:46 +0800

bpp (0.2.3) unstable; urgency=medium

  * Considerable speed increase
    Attempting to slightly refactor the lexer/parser to remove ambiguity
    and reduce our dependence on ANTLR's lookahead and backtracking

 -- rail5 <andrew@rail5.org>  Sat, 15 Feb 2025 17:34:15 +0800

bpp (0.2.2) unstable; urgency=medium

  * Override add_object within code_entity base class
    Every code entity should be able to add object code, not only add a
    reference to the object internally
    This removes a lot of silly code duplication which took place in
    classes derived from code_entity
    And, incidentally, closes #3
  * Properly parse 'for' loops

 -- rail5 <andrew@rail5.org>  Sat, 15 Feb 2025 13:41:16 +0800

bpp (0.2.1) unstable; urgency=medium

  * Fixed #4:
    Do not emit the 'connective' token in contexts in which the
    connective symbol should be interpreted as a literal
    Also recognize a solitary pipe as a valid connective

 -- rail5 <andrew@rail5.org>  Fri, 14 Feb 2025 16:13:13 +0800

bpp (0.2.0) unstable; urgency=medium

  * Added a small standard library to store common data structures
    This standard library will be provided by the libstd-bpp package
    Which package will be a dependency of bpp
    Standard library has for now: Array, Stack, Queue
  * Added option for dynamic linking (-D) in the compiler
    If dynamic linking is enabled, the code from @include'd files will
    Not be copied into your compiled file, but instead, your compiled
    Program will contain a Bash "source" directive pointing to the
    Compiled version of the dynamically linked library, linking it at
    Runtime.
    If you dynamically link an included file such as:
    /usr/lib/bpp/stdlib/Stack.bpp
    Your compiled program will expect to be able to find at runtime:
    /usr/lib/bpp/stdlib/Stack.sh
  * Added support for angle-bracket includes and compiler include paths
    A Bash++ directive such as @include <file> will scan the include
    Paths for the given file.
    The default include path is /usr/lib/bpp/stdlib
    More include paths can be added with the -I option in the compiler
    Include paths will be searched in the order in which they are added
  * Properly parse Bash while loops
  * @new properly returns a pointer (thanks to supershells)
  * Patch: Ensure methods and datamembers don't share names

 -- rail5 <andrew@rail5.org>  Thu, 13 Feb 2025 19:33:29 +0800

bpp (0.1.1) unstable; urgency=medium

  * Patch: Override get_code methods in bash_if_branch
    The base code_entity version of these methods return empty strings
    for pre-and post-code buffers
    This broke if statements that weren't split across multiple lines,
    and therefore never caused the code buffers to be flushed
  * Patch: Add stray terminal tokens to program

 -- rail5 <andrew@rail5.org>  Wed, 12 Feb 2025 22:25:09 +0800

bpp (0.1) unstable; urgency=medium

  * Initial release
    Bash++ is still considered to be in beta (or alpha, take your pick)
    And is expected to break often and have many bugs.
    Please report any bugs you find to the GitHub issue tracker:
    https://github.com/rail5/bashpp/issues

 -- rail5 <andrew@rail5.org>  Wed, 12 Feb 2025 20:09:39 +0800
