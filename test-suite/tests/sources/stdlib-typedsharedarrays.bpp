@include "../../../stdlib/TypedSharedArray"

@class Object {
	@public member="default value"
}

@class DerivedObject : Object {
	@public member="derived value"
}

@class Unrelated {
	@public member="unrelated"
}

@Object obj1
@DerivedObject obj2
@Unrelated unrelatedObj

# SINGLE-PROCESS, UNENCRYPTED ARRAY TEST

@TypedSharedArray array
@array.set_type "Object"
@array.setEncrypted 0
@array.push &@obj1
@array.push &@obj2
@array.push &@unrelatedObj # Error
@array.size # 2
@array.at 0 # obj1 pointer
@array.at 1 # obj2 pointer
@array.insert 1 d # Error
@array.insert 1 &@obj1
@array.size # 3
@array.at 2 # obj1 pointer
@array.remove 2
@array.size # 2
@array.at 0 # obj1 pointer
@array.at 1 # obj2 pointer
@array.pop # obj2 pointer
@array.size # 1
@array.insert 0 &@unrelatedObj # Error
@array.insert 0 &@obj2
@array.size # 2
@array.at 1 # obj2 pointer
@array.remove 0
@array.size # 1
@array.at 0 # obj2 pointer
@array.insert 1 &@obj1
@array.slice 0 1 # obj1 pointer {space} obj2 pointer
@array.slice 1 2 # obj2 pointer
@array.all # obj1 pointer {space} obj2 pointer
@array.front # obj1 pointer
@array.back # obj2 pointer
@array.pop # obj2 pointer
@array.all # obj1 pointer
@array.front # obj1 pointer
@array.back # obj1 pointer
@array.clear
@array.size # 0

@delete @array

# The remaining tests (multi-process, encrypted) will always yield exactly the same results
# 	as the tests for stdlib-sharedarrays
# In other words:
# 	If multi-process and encrypted tests pass for stdlib-sharedarrays,
# 	AND the single-process unencrypted tests pass for stdlib-typedsharedarrays,
# 	then the multi-process and encrypted tests for stdlib-typedsharedarrays are guaranteed to pass as well.
# Therefore, we skip them here to avoid redundancy.
