#AUTODOC#

if ! command -v wc &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'wc' command to be available."
	exit 1
fi

if ! command -v head &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'head' command to be available."
	exit 1
fi

if ! command -v base64 &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'base64' command to be available."
	exit 1
fi

if ! command -v flock &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'flock' command to be available."
	exit 1
fi

if ! command -v sed &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'sed' command to be available."
	exit 1
fi

if ! command -v chmod &> /dev/null; then
	>&2 echo "Bash++: SharedQueue requires the 'chmod' command to be available."
	exit 1
fi

#CLASS SharedQueue
## The SharedQueue class provides a queue implementation that shares its state across multiple instances.
@class SharedQueue {
	@protected queue_file
	@protected encrypted=0
	@protected encryption_key
	@protected used=0

	##METHOD public setEncrypted
	### Sets whether the queue should be encrypted.
	### Encrypting the queue can mitigate unauthorized reads by other processes.
	### This cannot be changed after the queue has been used.
	###PARAM primitive value
	#### '1' or 'true' enables encryption, any other value disables it.
	@public @method setEncrypted value {
		if [[ @this.used -ne 0 ]]; then
			>&2 echo "Error: SharedQueue: Cannot change encryption setting after the queue has been used."
			return 1
		fi

		if [[ "$value" == "1" || "$value" == "true" ]]; then
			@this.encrypted=1
			if ! command -v openssl &> /dev/null; then
				>&2 echo "Bash++: SharedQueue requires the 'openssl' command to be available for encryption."
				return 1
			fi
		else
			@this.encrypted=0
		fi
	}

	##METHOD public size
	### Echoes the number of elements in the queue.
	@public @method size {
		wc -l 2>/dev/null < @this.queue_file || echo 0
	}

	##METHOD public enqueue
	### Adds a value to the back of the queue.
	###PARAM primitive value
	#### The value to add to the queue.
	@public @method enqueue value {
		@this.used=1
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		if [[ @this.encrypted -eq 1 ]]; then
			value="$(openssl enc -aes-256-cbc -pbkdf2 -pass pass:@this.encryption_key -a -A <<<"$value")"
		fi
		printf "%s" "$value" | base64 -w0 >> "@this.queue_file"
		echo >> "@this.queue_file"
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	@private @method _get_front {
		local first_line=@(head -n 1 "@this.queue_file" | base64 -d)
		if [[ -z "$first_line" ]]; then
			return 1
		fi

		if [[ @this.encrypted -eq 1 ]]; then
			printf "%s" "$first_line" | openssl enc -d -aes-256-cbc -pbkdf2 -pass pass:@this.encryption_key -a -A
		else
			echo "$first_line"
		fi
	}

	@private @method _get_back {
		local last_line=@(tail -n 1 "@this.queue_file" | base64 -d)
		if [[ -z "$last_line" ]]; then
			return 1
		fi

		if [[ @this.encrypted -eq 1 ]]; then
			printf "%s" "$last_line" | openssl enc -d -aes-256-cbc -pbkdf2 -pass pass:@this.encryption_key -a -A
		else
			echo "$last_line"
		fi
	}

	##METHOD public dequeue
	### Removes the front element from the queue and echoes it.
	@public @method dequeue {
		@this.used=1
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		@this._get_front
		if [[ $? -ne 0 ]]; then
			flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
			exec {BPP__SHAREDQUEUE__LOCKFD}>&-
			return 1
		fi
		sed -i.tmp '1d' "@{this.queue_file}" && rm -f "@{this.queue_file}.tmp"
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	##METHOD public front
	### Echoes the front element of the queue without removing it.
	@public @method front {
		@this.used=1
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		@this._get_front
		if [[ $? -ne 0 ]]; then
			flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
			exec {BPP__SHAREDQUEUE__LOCKFD}>&-
			return 1
		fi
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	##METHOD public back
	### Echoes the back element of the queue without removing it.
	@public @method back {
		@this.used=1
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		@this._get_back
		if [[ $? -ne 0 ]]; then
			flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
			exec {BPP__SHAREDQUEUE__LOCKFD}>&-
			return 1
		fi
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	##METHOD public clear
	### Removes all elements from the queue.
	@public @method clear {
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		> "@this.queue_file"
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	##METHOD public empty
	### Echoes "true" if the queue is empty, "false" otherwise.
	@public @method empty {
		exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
		flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
		if [[ -z $(head -n 1 "@this.queue_file") ]]; then
			echo "true"
		else
			echo "false"
		fi
		flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
		exec {BPP__SHAREDQUEUE__LOCKFD}>&-
	}

	@constructor {
		@this.queue_file=@(mktemp)
		chmod 600 "@this.queue_file"
		@this.encryption_key=@(head -c 32 /dev/urandom | base64 -w0)
	}

	@destructor {
		if [[ -f "@this.queue_file" ]]; then
			exec {BPP__SHAREDQUEUE__LOCKFD}<>"@this.queue_file"
			flock -x "${BPP__SHAREDQUEUE__LOCKFD}"
			rm -f "@this.queue_file" 2>/dev/null
			flock -u "${BPP__SHAREDQUEUE__LOCKFD}"
			exec {BPP__SHAREDQUEUE__LOCKFD}>&-
		fi
	}
}

#ENDAUTODOC#
