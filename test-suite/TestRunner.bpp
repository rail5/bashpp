@class TestRunner {
	@private @TestStats* stats

	@public @method setStats stats {
		@this.stats="$stats" # This should be rewritten when type checking is properly implemented
	}

	@public @method runTest name sourceFile expectedOutput {
		@Test test
		@test.setName "$name"
		@test.setSourceFile "$sourceFile"
		@test.setExpectedOutput "$expectedOutput"
		@test.run

		# TODO(@rail5): I wanted to write this as a 'case' statement,
		# And discovered that 'case' statements are broken
		# (All the pre-code and post-code segments get haphazardly added around the case statement, breaking it)
		# Fix 'case' statements in the compiler.

		# TODO(@rail5): Turns out if ... elif is broken too
		# The supershell function call for "@test.getStatus" is inserted directly before the 'elif', rather than before the 'if'
		# Which means the function doesn't get called, and the substituted string is empty when we're trying to compare it to "fail" or "untested"
		# Fix if ... elif in the compiler.
		if [[ "@test.getStatus" == "pass" ]]; then
			@this.stats.incrementPassedTests
		fi
		if [[ "@test.getStatus" == "fail" ]]; then
			@this.stats.incrementFailedTests
		fi
		if [[ "@test.getStatus" == "untested" ]]; then
			@this.stats.incrementUntestedTests
		fi

		echo @test
	}
}
