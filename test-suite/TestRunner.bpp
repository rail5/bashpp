@include_once "TestStats.bpp"

@class TestRunner {
	@public @TestStats* stats=@new TestStats
	@public tests=() # Hack. Array of pointers

	@public @method updateStats test {
		@Test* test="$test"

		case "@test.getStatus" in
			"pass")
				@this.stats.incrementPassedTests
				;;
			"fail")
				@this.stats.incrementFailedTests
				;;
			"untested")
				@this.stats.incrementUntestedTests
				;;
		esac

		echo @test.toPrimitive
	}

	@public @method addTest name {
		@Test* test=@new Test
		@test.setName "$name"
		@test.setSourceFile "test-suite/tests/sources/$name.bpp"
		@test.setExpectedOutput "@(cat test-suite/tests/expected/$name)"
		@test.setStats @this.stats

		@this.tests+=("@test")
	}

	@public @method addAllTests {
		for source in test-suite/tests/sources/*.bpp; do
			@Test* test=@new Test
			@test.setSourceFile "$source"
			@test.setExpectedOutput "@(cat test-suite/tests/expected/@(basename "$source" .bpp))"
			@test.setStats @this.stats
			@test.setName "@(basename "$source" .bpp)"
			@this.tests+=("@test")
		done
	}

	@public @method runAllTests {
		# Run all the tests

		# How many tests can we run concurrently?
		local numberOfCores=@(nproc)
		local concurrentTests=$((numberOfCores / 2))
		if [[ $concurrentTests -eq 0 ]]; then
			concurrentTests=1
		fi

		for i in @(seq 0 $((@{#this.tests[@]} - 1))); do
			@Test* test="@{this.tests[$i]}"
			@test.run &
			if [[ $((i % concurrentTests)) -eq 0 ]]; then
				wait
			fi
		done
		# Wait for all tests to finish
		wait
	}

	@public @method runTest name {
		if [[ -z "$name" ]]; then
			echo "Test name must be provided."
			exit 1
		fi
		for i in @(seq 0 $((@{#this.tests[@]} - 1))); do
			@Test* test="@{this.tests[$i]}"
			if [[ "@test.getName" == "$name" ]]; then
				@test.run
				return
			fi
		done
		echo "Test not found: $name"
		@this.stats.incrementUntestedTests
	}

	@public @method listTests {
		for i in @(seq 0 $((@{#this.tests[@]} - 1))); do
			@Test* test="@{this.tests[$i]}"
			echo "@test.getName"
		done
	}

	@constructor {
		@this.stats.init
	}
}
