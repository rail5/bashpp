#!/usr/bin/env bpp
#AUTODOC#

# Copyright (C) 2025 Andrew S. Rightenburg
# GNU General Public License v3.0
# This file is part of the Bash++ Standard Library.

@include_once "Array"

#CLASS TypedArray : Array
## The TypedArray class provides an array implementation which enforces type restrictions on its elements.
## After setting the array's type, all elements must be pointers to objects of that type or its subclasses.
@class TypedArray : Array {
	@protected type=""
	@protected used=0

	##METHOD public set_type
	### Sets the type of elements that this array will hold.
	### This method must be called before adding elements to the array.
	### The array's type cannot be changed after elements have been added.
	###PARAM primitive type
	#### The type to enforce for the elements of this array.
	@virtual @public @method set_type type {
		if [[ @this.used -ne 0 ]]; then
			>&2 echo "Error: TypedArray: Cannot change type after the array has been used."
			return 1
		fi
		@this.type="$type"
	}

	@protected @method _check_type value {
		local check=@dynamic_cast<@this.type> "$value"
		if [[ "$check" == @nullptr ]]; then
			>&2 echo "Error: TypedArray: Value '$value' is not of type '@this.type'."
			return 1
		fi
		return 0
	}

	##METHOD public push
	### Adds a value to the end of the array, enforcing the specified type.
	###PARAM primitive value
	#### The value to add to the array.
	@public @method push value {
		@this.used=1
		if @this._check_type "$value"; then
			@super.push "$value"
		else
			return 1
		fi
	}

	##METHOD public insert
	### Inserts a value at a specific index in the array, enforcing the specified type.
	###PARAM primitive index
	#### The index at which to insert the value.
	###PARAM primitive value
	#### The value to insert into the array.
	@public @method insert index value {
		@this.used=1
		if @this._check_type "$value"; then
			if [[ $index -lt 0 || $index -gt @{#this.array[@]} ]]; then
				return 1
			fi
			@super.insert "$index" "$value"
		else
			return 1
		fi
	}
}
